PROJECT(campvis-scripting)
CMAKE_MINIMUM_REQUIRED(VERSION 2.8.0 FATAL_ERROR)

MESSAGE(STATUS "Configuring CAMPVis Scripting")

# Lua
FIND_PACKAGE(Lua REQUIRED)
IF(LUA_FOUND)
    MESSAGE(STATUS "* Found Lua")
    LIST(APPEND CampvisGlobalDefinitions ${LUA_DEFINITIONS})
    LIST(APPEND CampvisGlobalIncludeDirs ${LUA_INCLUDE_DIR})
    LIST(APPEND CampvisGlobalExternalLibs ${LUA_LIBRARY})
ELSE(LUA_FOUND)
    MESSAGE(FATAL_ERROR "Lua not found!")
ENDIF(LUA_FOUND)

# SWIG
FIND_PACKAGE(SWIG REQUIRED)
MESSAGE(STATUS "* Found SWIG")
INCLUDE(${SWIG_USE_FILE})


FILE(GLOB CampvisScriptingSources
    *.cpp
    glue/*.cpp
)

FILE(GLOB CampvisScriptingHeaders
    *.h
    glue/*.h
)


# Place all of CAMPVis' Lua modules in one sub-directory and shorten their names. This is done to
# make Lua modules easier to import and avoid mixing them with other CAMPVis' libraries.
SET(CampvisLuaModulesDirectory "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${CMAKE_CFG_INTDIR}/lua-mods/")

# Lua modules will be placed in a sub-directory that won't be picked up by Lua automatically. Let
# the code know via a #define what that sub-directory is so that it can instruct Lua to search it.
LIST(APPEND CampvisScriptingDefinitions "-DCAMPVIS_LUA_MODS_PATH=\"${CampvisLuaModulesDirectory}?${CMAKE_SHARED_MODULE_SUFFIX}\"")

SET(CampvisBindingDirs ext/tgt core)

# Look for bindings for all enabled CAMPVis modules
FOREACH(ModName ${CampvisModules})
    STRING(TOUPPER ${ModName} ModNameUpper)

    IF(CAMPVIS_BUILD_MODULE_${ModNameUpper})
        LIST(APPEND CampvisBindingDirs "modules/${ModName}")

        FILE(GLOB ModLuaPipelines "${CampvisHome}/modules/${ModName}/pipelines/*.lua")
        LIST(APPEND CampvisLuaPipelines ${ModLuaPipelines})
    ENDIF(CAMPVIS_BUILD_MODULE_${ModNameUpper})
ENDFOREACH(ModName ${CampvisModules})

# Hack-fix for a bug in SWIG_ADD_MODULE that breaks out-of-tree builds by not creating wrapper
# output directories.
# TODO: remove once http://www.cmake.org/Bug/view.php?id=14459 lands
FOREACH(BindingDir ${CampvisBindingDirs})
    FILE(MAKE_DIRECTORY "${CMAKE_BINARY_DIR}/${BindingDir}/bindings")
ENDFOREACH(BindingDir ${CampvisBindingDirs})


# Declare a Lua module to be generated by SWIG from the specified interface file
MACRO(DECLARE_LUA_MODULE InterfaceFile)
    STRING(REGEX REPLACE ".*/([A-Za-z0-9_]+)\\.i" "\\1" LuaModShortName ${InterfaceFile})
    SET(LuaModName "${LuaModShortName}-lua-mod")
    MESSAGE(STATUS "* ${LuaModShortName}")

    SET_SOURCE_FILES_PROPERTIES(${InterfaceFile} PROPERTIES CPLUSPLUS ON)
    SET_SOURCE_FILES_PROPERTIES(${InterfaceFile} PROPERTIES SWIG_FLAGS "-I${CampvisHome}")
    LINK_DIRECTORIES(${CampvisGlobalLinkDirectories} ${CampvisModulesLinkDirectories})
    SWIG_ADD_MODULE(${LuaModName} lua ${InterfaceFile})
    SWIG_LINK_LIBRARIES(${LuaModName} tgt campvis-core campvis-modules ${CampvisGlobalExternalLibs})

    SET(LuaModFullPath "${CampvisLuaModulesDirectory}${CMAKE_SHARED_LIBRARY_PREFIX}${LuaModShortName}${CMAKE_SHARED_LIBRARY_SUFFIX}")

    # The most reliable approach to changing a target's output directory to a sub-directory of the
    # main build folder if a multi-config generator (e.g. Visual Studio or XCode) may be used is
    # to invoke a custom command to copy the necessary files after the build finishes. For more
    # details see: http://www.cmake.org/pipermail/cmake/2008-June/022358.html
    ADD_CUSTOM_COMMAND(
        TARGET ${LuaModName}
        POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E make_directory ${CampvisLuaModulesDirectory}
        COMMAND ${CMAKE_COMMAND} -E copy $<TARGET_FILE:${LuaModName}> ${LuaModFullPath}
    )

    LIST(APPEND CampvisLuaModules ${LuaModName})
ENDMACRO(DECLARE_LUA_MODULE)

MESSAGE(STATUS "Setting up Lua modules:")

# Generate a Lua module for every interface file found
FOREACH(BindingDir ${CampvisBindingDirs})
    FILE(GLOB InterfaceFiles "${CampvisHome}/${BindingDir}/bindings/*.i")

    FOREACH(InterfaceFile ${InterfaceFiles})
        FILE(RELATIVE_PATH InterfaceFileRelativePath ${CMAKE_CURRENT_SOURCE_DIR} ${InterfaceFile})
        DECLARE_LUA_MODULE(${InterfaceFileRelativePath})
    ENDFOREACH(InterfaceFile ${InterfaceFiles})
ENDFOREACH(BindingDir ${CampvisBindingDirs})


# Generate a registration header for Lua pipelines
FOREACH(LuaPipeline ${CampvisLuaPipelines})
    PARSE_SCRIPT_FOR_PIPELINE(${LuaPipeline})
ENDFOREACH(LuaPipeline ${CampvisBindingDirs})

WRITE_SCRIPTED_PIPELINE_REGISTRATION("gen_pipelineregistration.h")


# Generate header with SWIG run-time functions
ADD_CUSTOM_COMMAND(
   OUTPUT "swigluarun.h"
   COMMAND ${SWIG_EXECUTABLE} -c++ -lua -external-runtime "swigluarun.h"
 )

LIST(APPEND CampvisScriptingHeaders "swigluarun.h")

ADD_DEFINITIONS(${CampvisGlobalDefinitions} ${CampvisScriptingDefinitions})
INCLUDE_DIRECTORIES(${CampvisGlobalIncludeDirs} ${CMAKE_CURRENT_BINARY_DIR})
LINK_DIRECTORIES(${CampvisGlobalLinkDirectories} ${CampvisModulesLinkDirectories})

ADD_LIBRARY(campvis-scripting STATIC
    ${CampvisScriptingSources} ${CampvisScriptingHeaders}
)
ADD_DEPENDENCIES(campvis-scripting ${CampvisLuaModules})
TARGET_LINK_LIBRARIES(campvis-scripting campvis-core campvis-modules tgt ${CampvisGlobalExternalLibs})

PROJECT(campvis-scripting)
CMAKE_MINIMUM_REQUIRED(VERSION 2.8.0 FATAL_ERROR)

MESSAGE(STATUS "Configuring CAMPVis-Scripting")

# SWIG
FIND_PACKAGE(SWIG REQUIRED)
MESSAGE(STATUS "* Found SWIG")
INCLUDE(${SWIG_USE_FILE})


FILE(GLOB CampvisScriptingSources
    *.cpp
    glue/*.cpp
	luagen/*.cpp
	luagen/properties/*.cpp
)

FILE(GLOB CampvisScriptingHeaders
    *.h
    glue/*.h
	luagen/*.h
	luagen/properties/*.h
)

IF(WIN32)
    #LIST(APPEND CampvisScriptingDefinitions "/wd4267")
ENDIF(WIN32)


# Place all of CAMPVis' Lua modules in one sub-directory and shorten their names. This is done to
# make Lua modules easier to import and avoid mixing them with other CAMPVis' libraries.
SET(CampvisLuaModulesDirectory "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${CMAKE_CFG_INTDIR}/lua-mods/")

# Lua modules will be placed in a sub-directory that won't be picked up by Lua automatically. Let
# the code know via a #define what that sub-directory is so that it can instruct Lua to search it.
LIST(APPEND CampvisGlobalDefinitions "-DCAMPVIS_LUA_MODS_PATH=\"${CampvisLuaModulesDirectory}?${CMAKE_SHARED_MODULE_SUFFIX}\"")
LIST(APPEND CampvisGlobalDefinitions "-DCAMPVIS_LUA_SCRIPTS_PATH=\"${CampvisLuaModulesDirectory}?.lua\"")
SET(CampvisGlobalDefinitions "${CampvisGlobalDefinitions}" PARENT_SCOPE)

SET(CampvisBindingDirs ext/cgt core application)

# Look for bindings for all enabled CAMPVis modules
FOREACH(ModName ${CampvisModules})
    STRING(TOUPPER ${ModName} ModNameUpper)

    IF(CAMPVIS_BUILD_MODULE_${ModNameUpper})
        LIST(APPEND CampvisBindingDirs "modules/${ModName}")
    ENDIF(CAMPVIS_BUILD_MODULE_${ModNameUpper})
ENDFOREACH(ModName ${CampvisModules})

# Declare a Lua module to be generated by SWIG from the specified interface file
MACRO(DECLARE_LUA_MODULE InterfaceFile)
    STRING(REGEX REPLACE ".*/([A-Za-z0-9_]+)\\.i" "\\1" LuaModShortName ${InterfaceFile})
    SET(LuaModName "${LuaModShortName}-lua-mod")
    MESSAGE(STATUS " - ${LuaModShortName}")

    IF(WIN32)
        ADD_DEFINITIONS("/wd4244 /wd4267")
    ELSEIF(UNIX)
        ADD_DEFINITIONS("-Wno-error=maybe-uninitialized")
    ENDIF()
    
    SET_SOURCE_FILES_PROPERTIES(${InterfaceFile} PROPERTIES CPLUSPLUS ON)
    SET_SOURCE_FILES_PROPERTIES(${InterfaceFile} PROPERTIES SWIG_FLAGS "-I${CampvisHome}")
    LINK_DIRECTORIES(${CampvisGlobalLinkDirectories} ${CampvisModulesLinkDirectories})
    SWIG_ADD_MODULE(${LuaModName} lua ${InterfaceFile})
    SWIG_LINK_LIBRARIES(${LuaModName} cgt campvis-core campvis-modules campvis-application-lib ${CampvisGlobalExternalLibs})

    SET(LuaModFullPath "${CampvisLuaModulesDirectory}${LuaModShortName}${CMAKE_SHARED_LIBRARY_SUFFIX}")

    # The most reliable approach to changing a target's output directory to a sub-directory of the
    # main build folder if a multi-config generator (e.g. Visual Studio or XCode) may be used is
    # to invoke a custom command to copy the necessary files after the build finishes. For more
    # details see: http://www.cmake.org/pipermail/cmake/2008-June/022358.html
    ADD_CUSTOM_COMMAND(
        TARGET ${LuaModName}
        POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E make_directory ${CampvisLuaModulesDirectory}
        COMMAND ${CMAKE_COMMAND} -E copy $<TARGET_FILE:${LuaModName}> ${LuaModFullPath}
    )

    LIST(APPEND CampvisLuaModules ${LuaModName})
ENDMACRO(DECLARE_LUA_MODULE)

MESSAGE(STATUS "* Setting up Lua modules:")

# Generate a Lua module for every interface file found
FOREACH(BindingDir ${CampvisBindingDirs})
    FILE(GLOB InterfaceFiles "${CampvisHome}/${BindingDir}/bindings/*.i")

    FOREACH(InterfaceFile ${InterfaceFiles})
        FILE(RELATIVE_PATH InterfaceFileRelativePath ${CMAKE_CURRENT_SOURCE_DIR} ${InterfaceFile})
        DECLARE_LUA_MODULE(${InterfaceFileRelativePath})
    ENDFOREACH(InterfaceFile ${InterfaceFiles})
ENDFOREACH(BindingDir ${CampvisBindingDirs})


# Generate header with SWIG run-time functions
ADD_CUSTOM_COMMAND(
   OUTPUT "swigluarun.h"
   COMMAND ${SWIG_EXECUTABLE} -c++ -lua -external-runtime "swigluarun.h"
 )

LIST(APPEND CampvisScriptingHeaders "swigluarun.h")

ADD_DEFINITIONS(${CampvisGlobalDefinitions} ${CampvisScriptingDefinitions})
INCLUDE_DIRECTORIES(${CampvisGlobalIncludeDirs} ${CMAKE_CURRENT_BINARY_DIR})
LINK_DIRECTORIES(${CampvisGlobalLinkDirectories} ${CampvisModulesLinkDirectories})

ADD_LIBRARY(campvis-scripting ${CampvisScriptingSources} ${CampvisScriptingHeaders})
TARGET_LINK_LIBRARIES(campvis-scripting campvis-core campvis-modules cgt ${CampvisGlobalExternalLibs})

# if campvis-core is built as a shared library, CMake will define the following flag to instruct
# the code to export DLL symbols
SET_TARGET_PROPERTIES(campvis-scripting PROPERTIES DEFINE_SYMBOL "CAMPVIS_SCRIPTING_BUILD_DLL")

IF(CAMPVIS_GROUP_SOURCE_FILES)
    DEFINE_SOURCE_GROUPS_FROM_SUBDIR(CampvisScriptingSources ${CampvisHome} "")
    DEFINE_SOURCE_GROUPS_FROM_SUBDIR(CampvisScriptingHeaders ${CampvisHome} "")
ENDIF()

INSTALL(TARGETS campvis-scripting DESTINATION exports EXPORT campvis-targets)
